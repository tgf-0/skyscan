// # SKYSCAN: Realtime Location Coordinate System
// Requires 3 Nav Recievers
// Controls receiver, scanning and storing coordinates.
// Nav receivers should be on `frequency:1` and `listenangle:180`
// Nav receivers should rename message field to nsig, esig and wsig
// Nav receivers should rename SignalStrength fields to nss, ess and wss
// Nav receivers should add values of TargetMessage to "origin_north", "origin_east", and "origin_west"
// A Text Panel with device field `:Location`
// Do not run SkyScan-Display.yolol concurrently, this script will handle its own display.
// Memory chip must be default named (`ChipField1`, `ChipField2`, etc)
// - CF1 is Origin North
// - CF2 is Origin East
// - CF3 is Origin West
// - CF4 is Scan index (for matching coords to a scan run)
// If running locmark.yolol:
// - CF5 is Saved Location 1 Origin North
// - CF6 is Saved Location 1 Origin East
// - CF7 is Saved Location 1 Origin West
// - CF8 is Saved Location 2 Origin North
// - CF9 is Saved Location 2 Origin East
// - CF10 is Saved Location 2 Origin West


// Realtime is inaccurate with a single receiver because of how slow YOLOL chips are.
// Apparently a signal can be lost or replaced by another signal before that signal's can be captured by YOLOL ops

// Known distances between transmitters
GW=61195.125
GE=63232.813
GN=67450.125
EW=120934
// EW=120.9
// Transmitter coordinates - origin_north is the system origin
// Nx=218.365
Nx=0
Ny=67449.77
// Nz=0
// Ex=-56228.338
// Ey=28926.849
// Ez=0
Wx=GW
// Wy=0
// Wz=0

// If not active, reset
if :skyscan==0 then
	// :navstatus="Inactive"
	:location="Inactive"
	:chipfield1=0
	:chipfield2=0
	:chipfield3=0
end

while :skyscan==1 do 
	// Get signal strength from each receiver and store it periodically
	// if :nss!=0 and :ess!=0 and :wss!=0 then
	nss=:nss;ess=:ess;wss=:wss;gss=:gss
	// end
	nd=(1000000-nss);ed=(1000000-ess);wd=(1000000-wss);gd=(1000000-gss)

	// Solve X coord
	x = (gd*gd - wd*wd + GW*GW)/(2*GW)
	// Solve Y coord
	y = (gd*gd - nd*nd + Nx*Nx + Ny*Ny - 2*Nx*x)/(2*Ny)
	// Solve fucking Z coord this is the ONLY line that requires adv chip. 
	// No good way around it :[
	zi=(gd*gd) - (x*x) - (y*y) 
	if zi<0 then zi*=-1 end
	z = sqrt(zi)
	:chipfield3=z;:chipfield2=y;:chipfield1=x
	:location="\nX:"+x+"\nY:"+y+"\nZ:"+z
end